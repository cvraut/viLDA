// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbsSampler
List gibbsSampler(IntegerVector words, IntegerVector docIDs, IntegerVector topics, int lengthVocab, int numDocuments, double alphaWords, double alphaTopics, int numEpochs, int warmUp, int lag);
RcppExport SEXP _viLDA_gibbsSampler(SEXP wordsSEXP, SEXP docIDsSEXP, SEXP topicsSEXP, SEXP lengthVocabSEXP, SEXP numDocumentsSEXP, SEXP alphaWordsSEXP, SEXP alphaTopicsSEXP, SEXP numEpochsSEXP, SEXP warmUpSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type words(wordsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type docIDs(docIDsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type topics(topicsSEXP);
    Rcpp::traits::input_parameter< int >::type lengthVocab(lengthVocabSEXP);
    Rcpp::traits::input_parameter< int >::type numDocuments(numDocumentsSEXP);
    Rcpp::traits::input_parameter< double >::type alphaWords(alphaWordsSEXP);
    Rcpp::traits::input_parameter< double >::type alphaTopics(alphaTopicsSEXP);
    Rcpp::traits::input_parameter< int >::type numEpochs(numEpochsSEXP);
    Rcpp::traits::input_parameter< int >::type warmUp(warmUpSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsSampler(words, docIDs, topics, lengthVocab, numDocuments, alphaWords, alphaTopics, numEpochs, warmUp, lag));
    return rcpp_result_gen;
END_RCPP
}
// svi
List svi(IntegerMatrix data, IntegerVector numDistinctWordVec, IntegerVector topics, int lengthVocab, int numDocuments, int maxIterConst, int maxVBiterConst, double alphaWords, double alphaTopics, double rho, double tol);
RcppExport SEXP _viLDA_svi(SEXP dataSEXP, SEXP numDistinctWordVecSEXP, SEXP topicsSEXP, SEXP lengthVocabSEXP, SEXP numDocumentsSEXP, SEXP maxIterConstSEXP, SEXP maxVBiterConstSEXP, SEXP alphaWordsSEXP, SEXP alphaTopicsSEXP, SEXP rhoSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numDistinctWordVec(numDistinctWordVecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type topics(topicsSEXP);
    Rcpp::traits::input_parameter< int >::type lengthVocab(lengthVocabSEXP);
    Rcpp::traits::input_parameter< int >::type numDocuments(numDocumentsSEXP);
    Rcpp::traits::input_parameter< int >::type maxIterConst(maxIterConstSEXP);
    Rcpp::traits::input_parameter< int >::type maxVBiterConst(maxVBiterConstSEXP);
    Rcpp::traits::input_parameter< double >::type alphaWords(alphaWordsSEXP);
    Rcpp::traits::input_parameter< double >::type alphaTopics(alphaTopicsSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svi(data, numDistinctWordVec, topics, lengthVocab, numDocuments, maxIterConst, maxVBiterConst, alphaWords, alphaTopics, rho, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_viLDA_gibbsSampler", (DL_FUNC) &_viLDA_gibbsSampler, 10},
    {"_viLDA_svi", (DL_FUNC) &_viLDA_svi, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_viLDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
